
KEY punkts:

-require library 'jsonwebtoken';
-to sign a JWT and pass the data as object,
   use method - jwt.sign(payload, secretOrPrivateKey, { expiresIn: 60 * 60 }, (err, token)=>{
                        //jwt here: in "token" variable
                      })
 -to validate JWT - 
jwt.verify(token, 'secretstring', function(err, decoded) {
  // when isn`t valid - err & decoded=undefined
  // when valid err=undefined & decoded=userdata
}); 
 //there ara avaliable to choose symmetric/asymmetryc, algorythm

-to save a token in this app use a cookie with 'secret' attribute 


/// https://www.telerik.com/blogs/json-web-token-jwt-implementation-using-nodejs

const crypto = require ('crypto');
/**1 Convert a string to Base64: */
const toBase64 = obj => {
    // converts the obj to a string
    const str = JSON.stringify (obj);
    // returns string converted to base64
    return Buffer.from(str).toString ('base64');
 };

 /**2 Replace special symbols in a Base64 string: */
 const replaceSpecialChars = b64string => {
    /* create a regex to match any of
     the characters =,+ or / and replace 
     them with their // substitutes */
      return b64string.replace (/[=+/]/g, charToBeReplaced => {
        switch (charToBeReplaced) {
          case '=':
            return '';
          case '+':
            return '-';
          case '/':
            return '_';
        }
      });
    };
    

    /****STEP1: generating header */

    // suppose we have this header
const header = {
    alg: 'HS256',
    typ: 'JWT',
  };

  const b64Header = toBase64 (header);
const jwtB64Header = replaceSpecialChars(b64Header);
console.log ("the header is: ","\x1b[31m", jwtB64Header, "\x1b[0m"); 

/**Step 2: Generating the Payload */
// a sample payload 
const payload = {
    iss: 'a_random_server_name',//information about the server that issued the token
    exp: 872990,// tokens expiry date in milliseconds
    // information about some random user
    name: 'John Bobo',
    email: 'myemail@test.com',
    isHuman: true,
  };

  const b64Payload = toBase64 (payload);
  const jwtB64Payload = replaceSpecialChars (b64Payload);
  console.log( `The payload is:`,"\x1b[32m", jwtB64Payload, "\x1b[0m");

  /***************Step 3: Generating the Signature***************/


  const createSignature =(jwtB64Header, jwtB64Payload, secret)=>{
    // create a HMAC(hash based message authentication code) using sha256 hashing alg
        let signature = crypto.createHmac ('sha256', secret);
    
    // use the update method to hash a string formed from our jwtB64Header a period and 
    //jwtB64Payload 
        signature.update (jwtB64Header + '.' + jwtB64Payload);
    
    //signature needs to be converted to base64 to make it usable
        signature = signature.digest ('base64');
    
    //of course we need to clean the base64 string of URL special characters
        signature = replaceSpecialChars (signature);
        return signature
    }

    const secret = 'mysecret';

    const signature = createSignature(jwtB64Header,jwtB64Payload, secret);
    console.log('signature is:',"\x1b[34m",signature,"\x1b[0m");

    //we now combine the results of the header,payload and signatue
const jsonWebToken = jwtB64Header + '.' + jwtB64Payload + '.' + signature;
console.log ("the JWT is :",jsonWebToken);
